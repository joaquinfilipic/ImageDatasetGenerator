package ar.com.itba.ss.datasetgenerator;

import java.io.File;

import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.google.gson.Gson;

import ar.com.itba.ss.datasetgenerator.configuration.Conf;
import ar.com.itba.ss.datasetgenerator.configuration.ConfigurationLoader;
import ar.com.itba.ss.datasetgenerator.configuration.HardConf;
import ar.com.itba.ss.datasetgenerator.engine.imagegeneration.ImageGenerator;
import ar.com.itba.ss.datasetgenerator.engine.simulation.Simulator;
import ar.com.itba.ss.datasetgenerator.engine.utils.FileUtils;
import ar.com.itba.ss.datasetgenerator.model.config.CameraHeight;
import ar.com.itba.ss.datasetgenerator.model.config.PixelMultiplier;
import ar.com.itba.ss.datasetgenerator.model.imagegeneration.ImageResource;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootApplication(exclude = CxfAutoConfiguration.class)
@EnableSwagger2
public class App {

	public static void main(String[] args) {
		
		ConfigurationLoader confLoader = new ConfigurationLoader();
		HardConf hardConf = new HardConf();
		
		Conf conf = confLoader.load(hardConf);
		confLoader.initializeBackgrounds(hardConf, conf);
		
		if (conf.getCleanImagesDirectories()) {
			FileUtils.deleteFiles(hardConf.getRgbImagesDirectory());
			FileUtils.deleteFiles(hardConf.getIrImagesDirectory());
			FileUtils.deleteFiles(hardConf.getParticlesDirectory());
		}
		
		int simulationStartNumber = conf.getSimulationStartNumber();
		
		for (PixelMultiplier rgbMultiplier : conf.getRgbMultipliers()) {
			conf.setRgbMultiplier(rgbMultiplier);
			
			for (Double irMultiplier : conf.getIrMultipliers()) {
				conf.setIrMultiplier(irMultiplier);
				
				for (ImageResource background : conf.getBackgrounds()) {
					conf.setBackground(background);
					
					for (CameraHeight cameraHeight : conf.getCameraHeights()) {
						conf.setCameraHeight(cameraHeight);
						confLoader.initializePeople(hardConf, conf);
						
						for (int iteration = 0; iteration < conf.getSimulationIterations(); iteration++) {
							
							// run simulation passing simulation number
							Simulator simulator = new Simulator();
							int nextSimulationStartNumber = simulator.simulate(conf, hardConf, simulationStartNumber);
						
							// this is the number of files generated by the simulation
							int generationCount = nextSimulationStartNumber - simulationStartNumber;
							
							// generate images for the simulation
							ImageGenerator imageGenerator = new ImageGenerator();
							imageGenerator.generate(conf, hardConf, simulationStartNumber, generationCount);
							
							// update simulation start number
							simulationStartNumber = nextSimulationStartNumber;
						}
					}
				}
			}
		}
		
	}
	
}
